<?php

namespace App\Controller;

use App\Entity\User;
use App\Form\RegisterType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Validator\Constraints\DateTime;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class RegisterController extends AbstractController
{
    private $entityManager;
    private $session;


    /**
     * @param EntityManagerInterface $entityManager
     */
    public function __construct(EntityManagerInterface $entityManager, SessionInterface $session)
    {
        $this->entityManager = $entityManager;
        $this->session = $session;
    }

    /**
     * @Route("/register", name="register")
     */
    public function index(Request $request, UserPasswordEncoderInterface $encoder): Response
    {
        $user = new User();
        $form = $this->createForm(RegisterType::class, $user);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {


            $user = $form->getData();

            //Set Variable on session for send email
            $this->session->set('user-email', $user->getEmail());
            $this->session->set('user-password', $user->getPassword());
            $this->session->set('user-firstname', $user->getFirstname());

            //Rename and Upload avatar
            $file = $user->getAvatar();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $file->move($this->getParameter('avatar_directory'), $fileName);
            $user->setAvatar($fileName);

            //Defind Register Date
            $today = new \DateTime('NOW');
            $user->setRegisterDate($today);

            //Encode password
            $password = $encoder->encodePassword($user, $user->getPassword());
            $user->setPassword($password);

            //Doctrine injection 
            $this->entityManager->persist($user);
            $this->entityManager->flush();


            $this->addFlash('notify', 'Your are registered, please use login form!');

            // Send email
            return $this->redirectToRoute('mail-register');
        }


        return $this->render('register/index.html.twig', [
            'form' => $form->createView()
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
