<?php

namespace App\Controller;

use App\Entity\Comment;
use App\Entity\Trick;
use App\Form\ProfileType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class ProfileController extends AbstractController
{

    private $entityManager;

    /**
     * @param EntityManagerInterface $entityManager
     */
    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->entityManager = $entityManager;
    }

    /**
     * USER PROFILE (ROLES [USER])
     * @Route("/profile", name="profile")
     */
    public function index(Request $request, UserPasswordEncoderInterface $encoder): Response
    {


        $user = $this->getUser();
        $register_date = $user->getRegisterAt();

        $form = $this->createForm(ProfileType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $password = $form->get('passwordold')->getData();

            if ($encoder->isPasswordValid($user, $password)) {

                $new_avatar = $form->get('newavatar')->getData();
                $new_firstname = $form->get('newfirstname')->getData();
                $new_lastname = $form->get('newlastname')->getData();
                $new_password = $form->get('newpassword')->getData();

                if (!empty($new_password)) {
                    $password = $encoder->encodePassword($user, $new_password);
                    $user->setPassword($password);
                }

                if (!empty($new_firstname)) {
                    $user->setFirstname($new_firstname);
                }

                if (!empty($new_lastname)) {
                    $user->setLastname($new_lastname);
                }

                if (!empty($new_avatar)) {
                    //REMOVE OLD AVATAR
                    unlink($this->getParameter('avatar_directory') . '/' . $user->getAvatar());
                    //Rename and Upload avatar
                    $file = $new_avatar;
                    $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
                    $file->move($this->getParameter('avatar_directory'), $fileName);
                    $user->setAvatar($fileName);
                }

                if (!empty($new_password) || !empty($new_firstname) || !empty($new_lastname) || !empty($new_avatar)) {

                    //Doctrine injection 
                    $this->entityManager->persist($user);
                    $this->entityManager->flush();

                    $this->addFlash('notify', 'You have modified your profile!');
                    return $this->redirectToRoute('profile');
                }
            } else {
                // on error return flash error
                $this->entityManager->persist($user);
                $this->entityManager->flush();
                $this->addFlash('notify_error', 'the confimation password is wrong, please retry!');
                return $this->redirectToRoute('profile');
            }
        }

        // Count posted tricks

        $postedtricks = $this->entityManager->getRepository(Trick::class)->findBy(array('author' => $user->getId()));
        $postedtricks = count($postedtricks);


        // Count coomment tricks
        $commentedtricks = $this->entityManager->getRepository(Comment::class)->findBy(array('user' => $user->getId()));
        $commentedtricks = count($commentedtricks);

        return $this->render('profile/index.html.twig', [
            'regsiter_date' => $register_date,
            'form' => $form->createView(),
            'postedtricks' => $postedtricks,
            'commentedtricks' => $commentedtricks,
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
